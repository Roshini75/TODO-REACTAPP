{"version":3,"sources":["logo.svg","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todo","props","state","item","list","handleOnChange","bind","handleOnSubmit","handleOnReset","e","preventDefault","this","setState","target","value","length","map","l","console","log","class","onSubmit","type","name","placeholder","onChange","key","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,iLCkE5BC,G,kBA/DX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,CAACC,KAAK,GAAIC,KAAK,IAC1B,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBALP,E,2EAOJG,GACVA,EAAEC,iBACFC,KAAKC,SAAS,CACVR,KAAK,O,qCAGEK,GACbE,KAAKC,SAAS,CACVT,KAAMM,EAAEI,OAAOC,U,qCAGNL,GACXA,EAAEC,iBACGC,KAAKT,MAAMC,KAAKY,SAIrBJ,KAAKC,SAAS,CACdR,KAAK,GAAD,mBAAMO,KAAKT,MAAME,MAAjB,CAAsBO,KAAKT,MAAMC,OACrCA,KAAM,KAGNQ,KAAKT,MAAME,KAAKY,KAAI,SAACC,GACdA,GACCC,QAAQC,IAAI,UAAUF,S,+BAM9B,OACI,6BACI,4BAAQG,MAAM,eAAd,aACA,0BAAMA,MAAM,aACZ,0BAAMC,SAAYV,KAAKJ,gBACnB,2BAAOa,MAAM,cAAb,8BACA,2BAAOA,MAAM,aAAaE,KAAK,OAAOC,KAAK,OAAOC,YAAY,uBAAuBV,MAAOH,KAAKT,MAAMC,KAAMsB,SAAWd,KAAKN,iBAC7H,2CAEA,6BACI,4BACCM,KAAKT,MAAME,KAAKO,KAAKT,MAAME,KAAKY,KAAI,SAASb,GAC1C,OACI,wBAAIiB,MAAM,YAAYM,IAAKvB,GAAOA,MAEvC,OAGNQ,KAAKT,MAAME,KAAKW,OAAO,4BAAQY,QAAShB,KAAKH,eAAtB,SAAoD,W,GAxD7EoB,IAAMC,YCUVC,MARf,WACE,OACE,6BACC,kBAAC,EAAD,QCKeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.397abaad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Todo.css'\r\nclass Todo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={item:\"\", list:[]};\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n        this.handleOnReset = this.handleOnReset.bind(this);\r\n    }\r\n    handleOnReset(e){\r\n        e.preventDefault();\r\n        this.setState({\r\n            list:[],\r\n        });\r\n    }\r\n    handleOnChange(e){\r\n      this.setState({\r\n          item: e.target.value\r\n      });\r\n    }\r\n    handleOnSubmit(e){\r\n        e.preventDefault();\r\n        if (!this.state.item.length) {\r\n        return;\r\n        }\r\n        \r\n        this.setState({\r\n        list: [...this.state.list,this.state.item],\r\n        item: ''\r\n        });\r\n        debugger;\r\n        this.state.list.map((l)=>{\r\n            if(l){\r\n                console.log(\"element\"+l);\r\n            }\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div>\r\n                <header class=\"todo-header\">Todo List</header>\r\n                <body class=\"todo-body\">\r\n                <form onSubmit = {this.handleOnSubmit}>\r\n                    <label class=\"todo-label\">Please enter the todo item</label>\r\n                    <input class=\"todo-input\" type=\"text\" name=\"item\" placeholder=\"Enter your todo item\" value={this.state.item} onChange ={this.handleOnChange}></input>\r\n                    <button>Submit</button>\r\n                    </form>\r\n                    <div>\r\n                        <ul>\r\n                        {this.state.list?this.state.list.map(function(item) {\r\n                            return(\r\n                                <li class=\"todo-item\" key={item}>{item}</li>\r\n                            );\r\n                        }):null}\r\n                        </ul>\r\n                    </div>\r\n                    {this.state.list.length?<button onClick={this.handleOnReset}>Reset</button>:null}\r\n                </body>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Todo;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './components/Todo';\nfunction App() {\n  return (\n    <div>\n     <Todo/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}